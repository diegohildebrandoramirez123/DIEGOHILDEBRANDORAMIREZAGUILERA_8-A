#include <ros/ros.h>
#include <string>

#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/ioctl.h>
#include <fcntl.h>
#include <termios.h>
#include <unistd.h>

int str_counter (char *str){
  int counter = 0;
  while(*str++){
    counter++;
  }

  return counter;
}

int main(int argc, char **argv){
  std::string dev = "/dev/ttyACM0",str_str;
  int baudrate = B9600;

  char str[64] = "Hello ROS & PSoC";

  ros::init(argc, argv, "UART_comm");

  ros::NodeHandle arg_nh("~");
  ros::NodeHandle nh;

  arg_nh.getParam("device", dev);
  arg_nh.getParam("baudrate", baudrate);
  arg_nh.getParam("message",str_str);

  strcpy(str,str_str.c_str());

//-------?????????-------------------------
      int fd;                           /* ??????????? */
      struct termios oldtio, newtio;    /* ???????? */
      int baudRate = B57600;
      fd = open(dev.c_str(), O_RDWR);   /* ??????????? */

      ioctl(fd, TCGETS, &oldtio);       /* ??????????????????? */
      newtio = oldtio;                  /* ?????????? */
      newtio.c_cflag = baudRate | CS8 | CREAD;
  	  newtio.c_iflag = IGNPAR | ICRNL;
  	  newtio.c_oflag = 0;
  	  newtio.c_lflag = 0;          /* ??????????? ???termios?? */
      ioctl(fd, TCSETS, &newtio);       /* ???????????? */
//--------------------------------------------------------

  while(ros::ok()){

    printf("%s\n%d\n",str, str_counter(str));

    if(str_counter(str)>64){
      ROS_INFO("Warning!! \nThe amount of data that PSoC5 can receive is up to 64bytes.");
      //PSoC5?USBUART??????64??????????????
    }

    if(fd<0){
      ROS_INFO("Error ! serialport open error!");
      return -1;
    }



    write(fd,str,sizeof(str)); //??

    ros::spinOnce();

  }
  ioctl(fd, TCSETS, &oldtio);       /* ??????????? */
  close(fd);                        /* ????????? */

  return 0;
}